// WordCount.cpp
// Written by Richert Wang for CS 32, F18.

#include "WordCount.h"
#include <stdio.h>
#include <ctype.h>
#include <cctype>

using namespace std;

// Default constructor
WordCount::WordCount() {
  
  for ( int i = 0; i < CAPACITY; i++)
    {
      //clear all vectors in table
      table[i].clear();
    }
}

// Simple hash function. Do not modify.
size_t WordCount::hash(std::string word) const {
	size_t accumulator = 0;
	for (size_t i = 0; i < word.size(); i++) {
		accumulator += word.at(i);
	}
	return accumulator % CAPACITY;
}

int WordCount::getTotalWords() const {
  int counter = 0;
  for (int i = 0; i < CAPACITY; i++)
    {
      for (int j = 0; j < table[i].size(); j++)
	{
	  counter += static_cast<int>( (table[i].at(j)).second );
	}
    }
  return counter;
}

int WordCount::getNumUniqueWords() const {
  int counter = 0;
  for (int i = 0; i < CAPACITY; i++)
    {
      for (int j = 0; j < table[i].size(); j++)
	{
	  counter += 1;
	}
    }
  return counter;
}

int WordCount::getWordCount(std::string word) const {
  size_t i = hash(word);
  for ( int j = 0; j < table[i].size();j++)
    {
      if ( ((table[i].at(j)).first).compare(word) == 0)
         {
	   return static_cast<int>( (table[i].at(j)).second );
	 }
    }
  return 0;
} 
	

int WordCount::incrWordCount(std::string word) {
  size_t i = hash(word);
  boolean found = false;
  for ( int j = 0; j < table[i].size();j++)
    {
      if ( ((table[i].at(j)).first).compare(word) == 0)
         {
	   (table[i].at(j)).second++;
	   found = true;
	   return static_cast<int>( (table[i].at(j)).second );
	 }
    }
  if (!found)
    {
      std::pair<std::string, size_t> nword;
      nword.first = word;
      nword.second = 1;
      table[i].pushback(nword);
    }
  return 0;
}


bool WordCount::isWordChar(char c) {
	// STUB
	return false;
}


std::string WordCount::stripWord(std::string word) {
  string ans = "";
  
  for ( int i = 0; i < word.length(); i++)
    {
      if ( isalpha(word[i]) )
	{
	  ans += toupper(word[i]);
	}
      else if ( word[i] == '-' || word[i] == '\'')
	{
	  if (i-1 < 1)
	    {
	      //do nothing
	    }
	  else if ( isalpha(word[i-1]) && isalpha(word[i+1]) )
	    {
	      ans += word[i];
	    }
	}
    }
  return ans;
}
